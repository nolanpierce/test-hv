#ifndef VMCS_FIELDS_H
#define VMCS_FIELDS_H

// VMCS Encoding Macros
#define VMCS_ENCODE_COMPONENT(access, type, width, index) \
    (unsigned)((unsigned short)(access) | \
               ((unsigned short)(index) << 1) | \
               ((unsigned short)(type) << 10) | \
               ((unsigned short)(width) << 13))

#define VMCS_ENCODE_COMPONENT_FULL(type, width, index) \
    VMCS_ENCODE_COMPONENT(full, type, width, index)

#define VMCS_ENCODE_COMPONENT_FULL_16(type, index) \
    VMCS_ENCODE_COMPONENT_FULL(type, word, index)

#define VMCS_ENCODE_COMPONENT_FULL_32(type, index) \
    VMCS_ENCODE_COMPONENT_FULL(type, doubleword, index)

#define VMCS_ENCODE_COMPONENT_FULL_64(type, index) \
    VMCS_ENCODE_COMPONENT_FULL(type, quadword, index)

// Enumerations for VMCS field components
enum __vmcs_access_e {
    full = 0,
    high = 1
};

enum __vmcs_type_e {
    control = 0,
    vmexit = 1,
    guest = 2,
    host = 3
};

enum __vmcs_width_e {
    word = 0,      // 16-bit
    quadword = 1,  // 64-bit
    doubleword = 2,// 32-bit
    natural = 3    // Natural width (32-bit on x86, 64-bit on x64)
};

// VMCS Field Encodings
enum __vmcs_fields_e {

    // 16-Bit Control Fields
    VIRTUAL_PROCESSOR_ID = VMCS_ENCODE_COMPONENT_FULL_16(control, 0),
    POSTED_INTR_NOTIFICATION_VECTOR = VMCS_ENCODE_COMPONENT_FULL_16(control, 1),
    EPTP_INDEX = VMCS_ENCODE_COMPONENT_FULL_16(control, 4),

    // 16-Bit Guest-State Fields
    GUEST_ES_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 0),
    GUEST_CS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 1),
    GUEST_SS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 2),
    GUEST_DS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 3),
    GUEST_FS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 4),
    GUEST_GS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 5),
    GUEST_LDTR_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 6),
    GUEST_TR_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(guest, 7),

    // 16-Bit Host-State Fields
    HOST_ES_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 0),
    HOST_CS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 1),
    HOST_SS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 2),
    HOST_DS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 3),
    HOST_FS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 4),
    HOST_GS_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 5),
    HOST_TR_SELECTOR = VMCS_ENCODE_COMPONENT_FULL_16(host, 6),

    // 64-Bit Control Fields
    IO_BITMAP_A = VMCS_ENCODE_COMPONENT_FULL_64(control, 0),
    IO_BITMAP_B = VMCS_ENCODE_COMPONENT_FULL_64(control, 1),
    MSR_BITMAP = VMCS_ENCODE_COMPONENT_FULL_64(control, 2),
    VM_EXIT_MSR_STORE_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 3),
    VM_EXIT_MSR_LOAD_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 4),
    VM_ENTRY_MSR_LOAD_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 5),
    EXECUTIVE_VMCS_POINTER = VMCS_ENCODE_COMPONENT_FULL_64(control, 6),
    PML_ADDRESS = VMCS_ENCODE_COMPONENT_FULL_64(control, 7),
    TSC_OFFSET = VMCS_ENCODE_COMPONENT_FULL_64(control, 8),
    VIRTUAL_APIC_PAGE_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 9),
    APIC_ACCESS_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 10),
    POSTED_INTR_DESC_ADDR = VMCS_ENCODE_COMPONENT_FULL_64(control, 11),
    VM_FUNCTION_CONTROL = VMCS_ENCODE_COMPONENT_FULL_64(control, 12),
    EPT_POINTER = VMCS_ENCODE_COMPONENT_FULL_64(control, 13),
    EOI_EXIT_BITMAP0 = VMCS_ENCODE_COMPONENT_FULL_64(control, 14),
    EOI_EXIT_BITMAP1 = VMCS_ENCODE_COMPONENT_FULL_64(control, 15),
    EOI_EXIT_BITMAP2 = VMCS_ENCODE_COMPONENT_FULL_64(control, 16),
    EOI_EXIT_BITMAP3 = VMCS_ENCODE_COMPONENT_FULL_64(control, 17),
    EPTP_LIST_ADDRESS = VMCS_ENCODE_COMPONENT_FULL_64(control, 18),
    VMREAD_BITMAP = VMCS_ENCODE_COMPONENT_FULL_64(control, 19),
    VMWRITE_BITMAP = VMCS_ENCODE_COMPONENT_FULL_64(control, 20),
    VIRT_EXCEPTION_INFO_ADDRESS = VMCS_ENCODE_COMPONENT_FULL_64(control, 21),
    XSS_EXIT_BITMAP = VMCS_ENCODE_COMPONENT_FULL_64(control, 22),
    ENCLS_EXITING_BITMAP = VMCS_ENCODE_COMPONENT_FULL_64(control, 23),
    TSC_MULTIPLIER = VMCS_ENCODE_COMPONENT_FULL_64(control, 24),
    SPP_TABLE_POINTER = VMCS_ENCODE_COMPONENT_FULL_64(control, 25),

    // 64-Bit Read-Only Data Fields
    GUEST_PHYSICAL_ADDRESS = VMCS_ENCODE_COMPONENT_FULL_64(vmexit, 0),

    // 64-Bit Guest-State Fields
    GUEST_VMCS_LINK_POINTER = VMCS_ENCODE_COMPONENT_FULL_64(guest, 0),
    GUEST_DEBUG_CONTROL = VMCS_ENCODE_COMPONENT_FULL_64(guest, 1),
    GUEST_PAT = VMCS_ENCODE_COMPONENT_FULL_64(guest, 2),
    GUEST_EFER = VMCS_ENCODE_COMPONENT_FULL_64(guest, 3),
    GUEST_PERF_GLOBAL_CONTROL = VMCS_ENCODE_COMPONENT_FULL_64(guest, 4),
    GUEST_BNDCFGS = VMCS_ENCODE_COMPONENT_FULL_64(guest, 9),

    // 64-Bit Host-State Fields
    HOST_PAT = VMCS_ENCODE_COMPONENT_FULL_64(host, 0),
    HOST_EFER = VMCS_ENCODE_COMPONENT_FULL_64(host, 1),
    HOST_PERF_GLOBAL_CTRL = VMCS_ENCODE_COMPONENT_FULL_64(host, 2),

    // 32-Bit Control Fields
    PIN_BASED_VM_EXEC_CONTROL = VMCS_ENCODE_COMPONENT_FULL_32(control, 0),
    CPU_BASED_VM_EXEC_CONTROL = VMCS_ENCODE_COMPONENT_FULL_32(control, 1),
    EXCEPTION_BITMAP = VMCS_ENCODE_COMPONENT_FULL_32(control, 2),
    PAGE_FAULT_ERROR_CODE_MASK = VMCS_ENCODE_COMPONENT_FULL_32(control, 3),
    PAGE_FAULT_ERROR_CODE_MATCH = VMCS_ENCODE_COMPONENT_FULL_32(control, 4),
    CR3_TARGET_COUNT = VMCS_ENCODE_COMPONENT_FULL_32(control, 5),
    VM_EXIT_CONTROLS = VMCS_ENCODE_COMPONENT_FULL_32(control, 6),
    VM_EXIT_MSR_STORE_COUNT = VMCS_ENCODE_COMPONENT_FULL_32(control, 7),
    VM_EXIT_MSR_LOAD_COUNT = VMCS_ENCODE_COMPONENT_FULL_32(control, 8),
    VM_ENTRY_CONTROLS = VMCS_ENCODE_COMPONENT_FULL_32(control, 9),
    VM_ENTRY_MSR_LOAD_COUNT = VMCS_ENCODE_COMPONENT_FULL_32(control, 10),
    VM_ENTRY_INTR_INFO_FIELD = VMCS_ENCODE_COMPONENT_FULL_32(control, 11),
    VM_ENTRY_EXCEPTION_ERROR_CODE = VMCS_ENCODE_COMPONENT_FULL_32(control, 12),
    VM_ENTRY_INSTRUCTION_LEN = VMCS_ENCODE_COMPONENT_FULL_32(control, 13),
    TPR_THRESHOLD = VMCS_ENCODE_COMPONENT_FULL_32(control, 14),
    SECONDARY_VM_EXEC_CONTROL = VMCS_ENCODE_COMPONENT_FULL_32(control, 15),
    PLE_GAP = VMCS_ENCODE_COMPONENT_FULL_32(control, 16),
    PLE_WINDOW = VMCS_ENCODE_COMPONENT_FULL_32(control, 17),

    // 32-Bit Read-Only Data Fields
    VM_INSTRUCTION_ERROR = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 0),
    EXIT_REASON = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 1),
    VM_EXIT_INTERRUPTION_INFO = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 2),
    VM_EXIT_INTERRUPTION_ERROR_CODE = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 3),
    IDT_VECTORING_INFO_FIELD = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 4),
    IDT_VECTORING_ERROR_CODE = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 5),
    VM_EXIT_INSTRUCTION_LEN = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 6),
    VMX_INSTRUCTION_INFO = VMCS_ENCODE_COMPONENT_FULL_32(vmexit, 7),

    // 32-Bit Guest-State Fields
    GUEST_ES_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 0),
    GUEST_CS_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 1),
    GUEST_SS_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 2),
    GUEST_DS_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 3),
    GUEST_FS_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 4),
    GUEST_GS_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 5),
    GUEST_LDTR_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 6),
    GUEST_TR_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 7),
    GUEST_GDTR_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 8),
    GUEST_IDTR_LIMIT = VMCS_ENCODE_COMPONENT_FULL_32(guest, 9),
    GUEST_ES_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 10),
    GUEST_CS_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 11),
    GUEST_SS_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 12),
    GUEST_DS_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 13),
    GUEST_FS_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 14),
    GUEST_GS_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 15),
    GUEST_LDTR_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 16),
    GUEST_TR_ACCESS_RIGHTS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 17),
    GUEST_INTERRUPTIBILITY_INFO = VMCS_ENCODE_COMPONENT_FULL_32(guest, 18),
    GUEST_ACTIVITY_STATE = VMCS_ENCODE_COMPONENT_FULL_32(guest, 19),
    GUEST_SM_BASE = VMCS_ENCODE_COMPONENT_FULL_32(guest, 20),
    GUEST_SYSENTER_CS = VMCS_ENCODE_COMPONENT_FULL_32(guest, 21),
    VMX_PREEMPTION_TIMER_VALUE = VMCS_ENCODE_COMPONENT_FULL_32(guest, 32),

    // 32-Bit Host-State Fields
    HOST_IA32_SYSENTER_CS = VMCS_ENCODE_COMPONENT_FULL_32(host, 0),

    // Natural-Width Control Fields
    CR0_GUEST_HOST_MASK = VMCS_ENCODE_COMPONENT_FULL(control, natural, 0),
    CR4_GUEST_HOST_MASK = VMCS_ENCODE_COMPONENT_FULL(control, natural, 1),
    CR0_READ_SHADOW = VMCS_ENCODE_COMPONENT_FULL(control, natural, 2),
    CR4_READ_SHADOW = VMCS_ENCODE_COMPONENT_FULL(control, natural, 3),
    CR3_TARGET_VALUE0 = VMCS_ENCODE_COMPONENT_FULL(control, natural, 4),
    CR3_TARGET_VALUE1 = VMCS_ENCODE_COMPONENT_FULL(control, natural, 5),
    CR3_TARGET_VALUE2 = VMCS_ENCODE_COMPONENT_FULL(control, natural, 6),
    CR3_TARGET_VALUE3 = VMCS_ENCODE_COMPONENT_FULL(control, natural, 7),

    // Natural-Width Read-Only Data Fields
    EXIT_QUALIFICATION = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 0),
    IO_RCX = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 1),
    IO_RSI = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 2),
    IO_RDI = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 3),
    IO_RIP = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 4),
    GUEST_LINEAR_ADDRESS = VMCS_ENCODE_COMPONENT_FULL(vmexit, natural, 5),

    // Natural-Width Guest-State Fields
    GUEST_CR0 = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 0),
    GUEST_CR3 = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 1),
    GUEST_CR4 = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 2),
    GUEST_ES_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 3),
    GUEST_CS_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 4),
    GUEST_SS_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 5),
    GUEST_DS_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 6),
    GUEST_FS_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 7),
    GUEST_GS_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 8),
    GUEST_LDTR_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 9),
    GUEST_TR_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 10),
    GUEST_GDTR_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 11),
    GUEST_IDTR_BASE = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 12),
    GUEST_DR7 = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 13),
    GUEST_RSP = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 14),
    GUEST_RIP = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 15),
    GUEST_RFLAGS = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 16),
    GUEST_PENDING_DBG_EXCEPTIONS = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 17),
    GUEST_SYSENTER_ESP = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 18),
    GUEST_SYSENTER_EIP = VMCS_ENCODE_COMPONENT_FULL(guest, natural, 19),

    // Natural-Width Host-State Fields
    HOST_CR0 = VMCS_ENCODE_COMPONENT_FULL(host, natural, 0),
    HOST_CR3 = VMCS_ENCODE_COMPONENT_FULL(host, natural, 1),
    HOST_CR4 = VMCS_ENCODE_COMPONENT_FULL(host, natural, 2),
    HOST_FS_BASE = VMCS_ENCODE_COMPONENT_FULL(host, natural, 3),
    HOST_GS_BASE = VMCS_ENCODE_COMPONENT_FULL(host, natural, 4),
    HOST_TR_BASE = VMCS_ENCODE_COMPONENT_FULL(host, natural, 5),
    HOST_GDTR_BASE = VMCS_ENCODE_COMPONENT_FULL(host, natural, 6),
    HOST_IDTR_BASE = VMCS_ENCODE_COMPONENT_FULL(host, natural, 7),
    HOST_IA32_SYSENTER_ESP = VMCS_ENCODE_COMPONENT_FULL(host, natural, 8),
    HOST_IA32_SYSENTER_EIP = VMCS_ENCODE_COMPONENT_FULL(host, natural, 9),
    HOST_RSP = VMCS_ENCODE_COMPONENT_FULL(host, natural, 10),
    HOST_RIP = VMCS_ENCODE_COMPONENT_FULL(host, natural, 11),
};


#endif // VMCS_FIELDS_H
